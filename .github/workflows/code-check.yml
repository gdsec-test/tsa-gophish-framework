name: Code quality check

on:
  pull_request:
    branches: [ main ]

jobs:
  tartufo:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for ECR access
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::911872167152:role/GD-AWS-USA-CTO-Phish-Dev-Private-Deploy
          role-duration-seconds: 1200             # default max is 7200
          aws-region: us-west-2                   # set region you want to target

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@9149ade017c57f86dea2f76a01f8b2d5bd06b10f

      - name: Docker login for Golden Containers ECR
        env:
          ECR_REGISTRY: 764525110978.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com # Do NOT change (region pulled from above)!
        run: |
          echo "Using: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Checkout Current Repo to be Scanned
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Checkout Tartufo Repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          repository: gdcorp-actions/tartufo
          token: ${{ secrets.REPO_CLONE_TOKEN }} # PAT with read access to gdcorp-actions/tartufo
          path: tartufo
          ref: main
          persist-credentials: false # Do not persist auth token in local git config.

      - name: Tartufo secret scanning using the Tartufo GitHub Action
        uses: ./tartufo
        with:
          github_token: ${{ secrets.REPO_CLONE_TOKEN }}

  python-code-check:
    needs: tartufo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Set up Python 3.8
        uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5
        with:
          python-version: 3.8
          architecture: 'x64'

      - name: Setup Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -U pip

      - name: Install Python dependencies
        env:
          SECURESERVER_ACCESS_KEY: ${{ secrets.SECURESERVER_ACCESS_KEY }}
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY}"
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -U -r requirements.txt -r requirements-test.txt
          ssh-agent -k

      - name: Python Tests
        run: |
          source venv/bin/activate
          python -m pytest -v
